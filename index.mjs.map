{"version":3,"file":"index.mjs","sources":["../lib/private_buffer.js","../lib/data_view_methods.js","../lib/get_complex.js","../lib/getter.js","../lib/get_struct_array.js","../lib/get_typedarray.js","../lib/get_bigint.js","../lib/get_boolean.js","../lib/get_struct.js","../lib/boolean2number.js","../lib/bigint2number.js","../lib/number2boolean.js","../lib/complex2boolean.js","../lib/set_boolean.js","../lib/bigint2boolean.js","../lib/set_bigint.js","../lib/boolean2bigint.js","../lib/is_struct_instance.js","../lib/complex2number.js","../lib/setter.js","../lib/set_struct_array.js","../lib/set_typedarray.js","../lib/set_number.js","../lib/set_complex.js","../lib/set_struct.js","../lib/field_properties.js","../lib/is_union_type.js","../lib/is_struct_type.js","../lib/is_valid_boolean.js","../lib/dtypes.js","../lib/casting_modes.js","../lib/is_valid_one_of.js","../lib/alignments.js","../lib/normalize_field.js","../lib/is_valid_nonempty_string.js","../lib/is_valid_type.js","../lib/is_valid_string.js","../lib/is_valid_positive_integer.js","../lib/init_field_object.js","../lib/has_properties.js","../lib/byte_length.js","../lib/resolve_alignment.js","../lib/normalize_union.js","../lib/field_index.js","../lib/byte_offsets.js","../lib/format_layout.js","../lib/to_string.js","../lib/format_linear.js","../lib/main.js","../lib/normalize_field_list.js","../lib/field_names.js","../lib/flatten_fields.js","../lib/partitions.js","../lib/ctor_name.js","../lib/create_prototype_accessors.js","../lib/to_json.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n// Define a property name which is unlikely to be used in end user code:\nvar PRIVATE_BUFFER = '__@@##$$@@__struct_buffer__@@$$##@@__';\n\n\n// EXPORTS //\n\nexport default PRIVATE_BUFFER;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar DATA_VIEW_METHODS = {\n\t'int8': {\n\t\t'get': 'getInt8',\n\t\t'set': 'setInt8'\n\t},\n\t'int16': {\n\t\t'get': 'getInt16',\n\t\t'set': 'setInt16'\n\t},\n\t'int32': {\n\t\t'get': 'getInt32',\n\t\t'set': 'setInt32'\n\t},\n\t'int64': {\n\t\t'get': 'getBigInt64',\n\t\t'set': 'setBigInt64'\n\t},\n\t'uint8': {\n\t\t'get': 'getUint8',\n\t\t'set': 'setUint8'\n\t},\n\t'uint16': {\n\t\t'get': 'getUint16',\n\t\t'set': 'setUint16'\n\t},\n\t'uint32': {\n\t\t'get': 'getUint32',\n\t\t'set': 'setUint32'\n\t},\n\t'uint64': {\n\t\t'get': 'getBigUint64',\n\t\t'set': 'setBigUint64'\n\t},\n\t'float16': {\n\t\t'get': 'getFloat16',\n\t\t'set': 'setFloat16'\n\t},\n\t'float32': {\n\t\t'get': 'getFloat32',\n\t\t'set': 'setFloat32'\n\t},\n\t'float64': {\n\t\t'get': 'getFloat64',\n\t\t'set': 'setFloat64'\n\t},\n\t'complex32': {\n\t\t'get': 'getFloat16',\n\t\t'set': 'setFloat16'\n\t},\n\t'complex64': {\n\t\t'get': 'getFloat32',\n\t\t'set': 'setFloat32'\n\t},\n\t'complex128': {\n\t\t'get': 'getFloat64',\n\t\t'set': 'setFloat64'\n\t},\n\t'bool': {\n\t\t'get': 'getUint8',\n\t\t'set': 'setUint8'\n\t}\n};\n\n\n// EXPORTS //\n\nexport default DATA_VIEW_METHODS;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-invalid-this, max-len */\n\n'use strict';\n\n// MODULES //\n\nimport IS_LITTLE_ENDIAN from '@stdlib/assert-is-little-endian';\nimport complex from '@stdlib/complex-cmplx';\nimport PRIVATE_BUFFER from './private_buffer.js';\n\n\n// VARIABLES //\n\nvar CMPLX_TO_REAL = {\n\t'complex128': 'float64',\n\t'complex64': 'float32',\n\t'complex32': 'float16'\n};\n\n\n// MAIN //\n\n/**\n* Returns a function for resolving field data.\n*\n* @private\n* @param {Object} obj - field object\n* @param {string} method - data view method name\n* @returns {Function} function for resolving field data\n*/\nfunction getComplex( obj, method ) {\n\treturn getter;\n\n\t/**\n\t* Reads a complex number from an underlying byte buffer.\n\t*\n\t* @private\n\t* @returns {Complex} result\n\t*/\n\tfunction getter() {\n\t\tvar view = this[ PRIVATE_BUFFER ];\n\t\tvar re = view[ method ]( obj.byteOffset, IS_LITTLE_ENDIAN );\n\t\tvar im = view[ method ]( obj.byteOffset+(obj.byteLength/2), IS_LITTLE_ENDIAN );\n\t\treturn complex( re, im, CMPLX_TO_REAL[ obj.type ] );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default getComplex;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport DATA_VIEW_METHODS from './data_view_methods.js';\nimport getNumber from './get_number.js';\nimport getBoolean from './get_boolean.js';\nimport getComplex from './get_complex.js';\nimport getBigInt from './get_bigint.js';\nimport getStruct from './get_struct.js';\nimport getTypedArray from './get_typedarray.js';\nimport getStructArray from './get_struct_array.js';\n\n\n// MAIN //\n\n/**\n* Returns a function for resolving field data.\n*\n* @private\n* @param {Object} obj - field object\n* @throws {Error} unexpected error\n* @returns {Function} function for resolving field data\n*/\nfunction getter( obj ) {\n\tif ( obj.length ) {\n\t\tif ( obj.isStructType ) {\n\t\t\treturn getStructArray( obj );\n\t\t}\n\t\treturn getTypedArray( obj );\n\t}\n\tswitch ( obj.type ) {\n\tcase 'float64':\n\tcase 'float32':\n\tcase 'float16':\n\tcase 'int8':\n\tcase 'int16':\n\tcase 'int32':\n\tcase 'uint8':\n\tcase 'uint16':\n\tcase 'uint32':\n\t\treturn getNumber( obj, DATA_VIEW_METHODS[ obj.type ].get );\n\n\tcase 'int64':\n\tcase 'uint64':\n\t\treturn getBigInt( obj, DATA_VIEW_METHODS[ obj.type ].get );\n\n\tcase 'bool':\n\t\treturn getBoolean( obj, DATA_VIEW_METHODS[ obj.type ].get );\n\n\tcase 'complex128':\n\tcase 'complex64':\n\tcase 'complex32':\n\t\treturn getComplex( obj, DATA_VIEW_METHODS[ obj.type ].get );\n\n\tdefault:\n\t\tif ( obj.isStructType ) {\n\t\t\treturn getStruct( obj );\n\t\t}\n\t\t// Ensure that we fail loudly if we have failed to add support for newly added data types:\n\t\tthrow new Error( format( 'unexpected error. Unrecognized data type. Value: `%s`.', obj.type ) );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default getter;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nimport PRIVATE_BUFFER from './private_buffer.js';\n\n\n// MAIN //\n\n/**\n* Returns a function for resolving field data.\n*\n* @private\n* @param {Object} obj - field object\n* @returns {Function} function for resolving field data\n*/\nfunction getStructArray( obj ) {\n\treturn getter;\n\n\t/**\n\t* Returns a list of `struct` views of an underlying byte buffer.\n\t*\n\t* @private\n\t* @returns {Array<Object>} result\n\t*/\n\tfunction getter() {\n\t\tvar offset;\n\t\tvar view;\n\t\tvar out;\n\t\tvar i;\n\n\t\tview = this[ PRIVATE_BUFFER ];\n\t\toffset = view.byteOffset + obj.byteOffset;\n\t\tout = [];\n\t\tfor ( i = 0; i < obj.length; i++ ) {\n\t\t\tout.push( new obj.type( view.buffer, offset, obj.byteLength ) );\n\t\t\toffset += obj.byteOffset;\n\t\t}\n\t\treturn out;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default getStructArray;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nimport typedarray from '@stdlib/array-typed';\nimport PRIVATE_BUFFER from './private_buffer.js';\n\n\n// MAIN //\n\n/**\n* Returns a function for resolving field data.\n*\n* @private\n* @param {Object} obj - field object\n* @returns {Function} function for resolving field data\n*/\nfunction getTypedArray( obj ) {\n\treturn getter;\n\n\t/**\n\t* Returns a typed array view of an underlying byte buffer.\n\t*\n\t* @private\n\t* @returns {TypedArray} result\n\t*/\n\tfunction getter() {\n\t\tvar view = this[ PRIVATE_BUFFER ];\n\t\treturn typedarray( view.buffer, view.byteOffset+obj.byteOffset, obj.length, obj.type ); // eslint-disable-line max-len\n\t}\n}\n\n\n// EXPORTS //\n\nexport default getTypedArray;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nimport IS_LITTLE_ENDIAN from '@stdlib/assert-is-little-endian';\nimport PRIVATE_BUFFER from './private_buffer.js';\n\n\n// MAIN //\n\n/**\n* Returns a function for resolving field data.\n*\n* @private\n* @param {Object} obj - field object\n* @param {string} method - data view method name\n* @returns {Function} function for resolving field data\n*/\nfunction getBigInt( obj, method ) {\n\treturn getter;\n\n\t/**\n\t* Reads a BigInt value from an underlying byte buffer.\n\t*\n\t* @private\n\t* @returns {BigInt} result\n\t*/\n\tfunction getter() {\n\t\tvar view = this[ PRIVATE_BUFFER ];\n\t\treturn view[ method ]( obj.byteOffset, IS_LITTLE_ENDIAN );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default getBigInt;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nimport IS_LITTLE_ENDIAN from '@stdlib/assert-is-little-endian';\nimport Boolean from '@stdlib/boolean-ctor';\nimport PRIVATE_BUFFER from './private_buffer.js';\n\n\n// MAIN //\n\n/**\n* Returns a function for resolving field data.\n*\n* @private\n* @param {Object} obj - field object\n* @param {string} method - data view method name\n* @returns {Function} function for resolving field data\n*/\nfunction getBoolean( obj, method ) {\n\treturn getter;\n\n\t/**\n\t* Reads a boolean value from an underlying byte buffer.\n\t*\n\t* @private\n\t* @returns {boolean} result\n\t*/\n\tfunction getter() {\n\t\tvar view = this[ PRIVATE_BUFFER ];\n\t\treturn Boolean( view[ method ]( obj.byteOffset, IS_LITTLE_ENDIAN ) );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default getBoolean;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nimport PRIVATE_BUFFER from './private_buffer.js';\n\n\n// MAIN //\n\n/**\n* Returns a function for resolving field data.\n*\n* @private\n* @param {Object} obj - field object\n* @returns {Function} function for resolving field data\n*/\nfunction getStruct( obj ) {\n\treturn getter;\n\n\t/**\n\t* Returns a `struct` view of an underlying byte buffer.\n\t*\n\t* @private\n\t* @returns {Object} result\n\t*/\n\tfunction getter() {\n\t\tvar view = this[ PRIVATE_BUFFER ];\n\t\treturn new obj.type( view.buffer, view.byteOffset+obj.byteOffset, obj.byteLength ); // eslint-disable-line max-len\n\t}\n}\n\n\n// EXPORTS //\n\nexport default getStruct;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Converts a boolean to a number.\n*\n* @private\n* @param {boolean} value - input value\n* @returns {number} result\n*/\nfunction boolean2number( value ) {\n\treturn ( value ) ? 1 : 0;\n}\n\n\n// EXPORTS //\n\nexport default boolean2number;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport Number from '@stdlib/number-ctor';\n\n\n// MAIN //\n\n/**\n* Converts a BigInt to a number.\n*\n* @private\n* @param {BigInt} value - input value\n* @returns {number} result\n*/\nfunction bigint2number( value ) {\n\treturn Number( value );\n}\n\n\n// EXPORTS //\n\nexport default bigint2number;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport Boolean from '@stdlib/boolean-ctor';\n\n\n// MAIN //\n\n/**\n* Converts a number to a boolean.\n*\n* @private\n* @param {number} value - input value\n* @returns {boolean} result\n*/\nfunction number2boolean( value ) {\n\treturn Boolean( value );\n}\n\n\n// EXPORTS //\n\nexport default number2boolean;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport Boolean from '@stdlib/boolean-ctor';\n\n\n// MAIN //\n\n/**\n* Converts a complex number to a boolean.\n*\n* @private\n* @param {ComplexLike} value - input value\n* @returns {boolean} result\n*/\nfunction complex2boolean( value ) {\n\treturn Boolean( value.re || value.im );\n}\n\n\n// EXPORTS //\n\nexport default complex2boolean;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nimport IS_LITTLE_ENDIAN from '@stdlib/assert-is-little-endian';\nimport { isPrimitive as isNumber } from '@stdlib/assert-is-number';\nimport { isPrimitive as isBoolean } from '@stdlib/assert-is-boolean';\nimport { isPrimitive as isBigInt } from '@stdlib/assert-is-bigint';\nimport isComplexLike from '@stdlib/assert-is-complex-like';\nimport isAllowedCast from '@stdlib/ndarray-base-assert-is-allowed-data-type-cast';\nimport complexDType from '@stdlib/complex-dtype';\nimport Boolean from '@stdlib/boolean-ctor';\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport PRIVATE_BUFFER from './private_buffer.js';\nimport boolean2number from './boolean2number.js';\nimport number2boolean from './number2boolean.js';\nimport complex2boolean from './complex2boolean.js';\nimport bigint2boolean from './bigint2boolean.js';\nimport defaults from './defaults.json';\n\n\n// MAIN //\n\n/**\n* Returns a function for writing field data.\n*\n* @private\n* @param {Object} obj - field object\n* @param {string} method - data view method name\n* @returns {Function} function for writing field data\n*/\nfunction setBoolean( obj, method ) {\n\treturn setter;\n\n\t/**\n\t* Writes a boolean value to an underlying byte buffer.\n\t*\n\t* @private\n\t* @param {*} value - value to set\n\t* @throws {TypeError} cannot cast provided values to field data type\n\t*/\n\tfunction setter( value ) {\n\t\tvar view;\n\t\tvar dt;\n\t\tvar v;\n\t\tif ( isBoolean( value ) ) {\n\t\t\tdt = 'bool';\n\t\t\tv = boolean2number( value );\n\t\t} else if ( isNumber( value ) ) {\n\t\t\tdt = defaults.dtypes.real;\n\t\t\tv = boolean2number( number2boolean( value ) );\n\t\t} else if ( isBigInt( value ) ) {\n\t\t\tdt = 'int64'; // note: the specific integer data type (int64 vs uint64) should not matter here\n\t\t\tv = boolean2number( bigint2boolean( value ) );\n\t\t} else if ( isComplexLike( value ) ) {\n\t\t\tdt = complexDType( value ) || defaults.dtypes.complex;\n\t\t\tv = boolean2number( complex2boolean( value ) );\n\t\t} else {\n\t\t\tdt = 'generic';\n\t\t\tv = Boolean( value );\n\t\t}\n\t\tif ( !isAllowedCast( dt, obj.type, obj.castingMode ) ) {\n\t\t\tthrow new TypeError( format( 'invalid assignment. Assigned value cannot be cast to the data type of `%s`. Data types: [%s, %s].', obj.name, obj.type, dt ) );\n\t\t}\n\t\tview = this[ PRIVATE_BUFFER ];\n\t\tview[ method ]( obj.byteOffset, v, IS_LITTLE_ENDIAN );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default setBoolean;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport Boolean from '@stdlib/boolean-ctor';\n\n\n// MAIN //\n\n/**\n* Converts a BigInt to a boolean.\n*\n* @private\n* @param {BigInt} value - input value\n* @returns {boolean} result\n*/\nfunction bigint2boolean( value ) {\n\treturn Boolean( value );\n}\n\n\n// EXPORTS //\n\nexport default bigint2boolean;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nimport IS_LITTLE_ENDIAN from '@stdlib/assert-is-little-endian';\nimport { isPrimitive as isNumber } from '@stdlib/assert-is-number';\nimport { isPrimitive as isBoolean } from '@stdlib/assert-is-boolean';\nimport { isPrimitive as isInteger } from '@stdlib/assert-is-integer';\nimport { isPrimitive as isBigInt } from '@stdlib/assert-is-bigint';\nimport isComplexLike from '@stdlib/assert-is-complex-like';\nimport isAllowedCast from '@stdlib/ndarray-base-assert-is-allowed-data-type-cast';\nimport minDataType from '@stdlib/array-min-dtype';\nimport complexDType from '@stdlib/complex-dtype';\nimport BigInt from '@stdlib/bigint-ctor';\nimport Number from '@stdlib/number-ctor';\nimport floor from '@stdlib/math-base-special-floor';\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport PRIVATE_BUFFER from './private_buffer.js';\nimport boolean2bigint from './boolean2bigint.js';\nimport defaults from './defaults.json';\n\n\n// MAIN //\n\n/**\n* Returns a function for writing field data.\n*\n* @private\n* @param {Object} obj - field object\n* @param {string} method - data view method name\n* @returns {Function} function for writing field data\n*/\nfunction setBigInt( obj, method ) {\n\treturn setter;\n\n\t/**\n\t* Writes a number value to an underlying byte buffer.\n\t*\n\t* @private\n\t* @param {*} value - value to set\n\t* @throws {TypeError} cannot cast provided values to field data type\n\t*/\n\tfunction setter( value ) {\n\t\tvar view;\n\t\tvar dt;\n\t\tvar v;\n\t\tif ( isBigInt( value ) ) {\n\t\t\tdt = 'int64'; // FIXME: support both int64 and uint64\n\t\t\tv = value;\n\t\t} else if ( isNumber( value ) ) {\n\t\t\tif ( isInteger( value ) ) {\n\t\t\t\tdt = minDataType( value );\n\t\t\t\tv = BigInt( value );\n\t\t\t} else {\n\t\t\t\tdt = defaults.dtypes.real;\n\t\t\t\tv = BigInt( floor( value ) );\n\t\t\t}\n\t\t} else if ( isBoolean( value ) ) {\n\t\t\tdt = 'bool';\n\t\t\tv = boolean2bigint( value );\n\t\t} else if ( isComplexLike( value ) ) {\n\t\t\tdt = complexDType( value ) || defaults.dtypes.complex;\n\t\t\tv = BigInt( floor( value.re ) ); // discard imaginary component\n\t\t} else {\n\t\t\tdt = 'generic';\n\t\t\tv = BigInt( floor( Number( v ) ) );\n\t\t}\n\t\tif ( !isAllowedCast( dt, obj.type, obj.castingMode ) ) {\n\t\t\tthrow new TypeError( format( 'invalid assignment. Assigned value cannot be cast to the data type of `%s`. Data types: [%s, %s].', obj.name, obj.type, dt ) );\n\t\t}\n\t\tview = this[ PRIVATE_BUFFER ];\n\t\tview[ method ]( obj.byteOffset, v, IS_LITTLE_ENDIAN );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default setBigInt;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport BigInt from '@stdlib/bigint-ctor';\n\n\n// MAIN //\n\n/**\n* Converts a boolean to a BigInt.\n*\n* @private\n* @param {boolean} value - input value\n* @returns {number} result\n*/\nfunction boolean2bigint( value ) {\n\treturn BigInt( ( value ) ? 1 : 0 );\n}\n\n\n// EXPORTS //\n\nexport default boolean2bigint;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isDataView from '@stdlib/assert-is-dataview';\nimport isObject from '@stdlib/assert-is-object';\nimport PRIVATE_BUFFER from './private_buffer.js';\n\n\n// MAIN //\n\n/**\n* Returns a boolean indicating if a value is a `struct` instance.\n*\n* @private\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a `struct` instance\n*/\nfunction isStructInstance( value ) {\n\t// NOTE: the following is a relatively weak test, but we cannot use `instanceof` checks, etc, due to the factory nature of the implementation. Regardless, here, we are just trying to sniff out a `struct` type. If calling as a constructor later fails, we punt the responsibility off to the user to handle what should be an edge case. If, in the future, this check proves insufficient, we can add further \"brand\" checks...\n\treturn (\n\t\tisObject( value ) &&\n\t\tisDataView( value[ PRIVATE_BUFFER ] )\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isStructInstance;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Converts a complex number to a number.\n*\n* @private\n* @param {ComplexLike} value - input value\n* @returns {number} result\n*/\nfunction complex2number( value ) {\n\treturn value.re;\n}\n\n\n// EXPORTS //\n\nexport default complex2number;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport DATA_VIEW_METHODS from './data_view_methods.js';\nimport setNumber from './set_number.js';\nimport setComplex from './set_complex.js';\nimport setBoolean from './set_boolean.js';\nimport setBigInt from './set_bigint.js';\nimport setStruct from './set_struct.js';\nimport setTypedArray from './set_typedarray.js';\nimport setStructArray from './set_struct_array.js';\n\n\n// MAIN //\n\n/**\n* Returns a function for setting field data.\n*\n* @private\n* @param {Object} obj - field object\n* @throws {Error} unexpected error\n* @returns {Function} function for setting field data\n*/\nfunction setter( obj ) {\n\tif ( obj.length ) {\n\t\tif ( obj.isStructType ) {\n\t\t\treturn setStructArray( obj );\n\t\t}\n\t\treturn setTypedArray( obj );\n\t}\n\tswitch ( obj.type ) {\n\tcase 'float64':\n\tcase 'float32':\n\tcase 'float16':\n\tcase 'int8':\n\tcase 'int16':\n\tcase 'int32':\n\tcase 'uint8':\n\tcase 'uint16':\n\tcase 'uint32':\n\t\treturn setNumber( obj, DATA_VIEW_METHODS[ obj.type ].set );\n\n\tcase 'int64':\n\tcase 'uint64':\n\t\treturn setBigInt( obj, DATA_VIEW_METHODS[ obj.type ].set );\n\n\tcase 'bool':\n\t\treturn setBoolean( obj, DATA_VIEW_METHODS[ obj.type ].set );\n\n\tcase 'complex128':\n\tcase 'complex64':\n\tcase 'complex32':\n\t\treturn setComplex( obj, DATA_VIEW_METHODS[ obj.type ].set );\n\n\tdefault:\n\t\tif ( obj.isStructType ) {\n\t\t\treturn setStruct( obj );\n\t\t}\n\t\t// Ensure that we fail loudly if we have failed to add support for newly added data types:\n\t\tthrow new Error( format( 'unexpected error. Unrecognized data type. Value: `%s`.', obj.type ) );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default setter;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nimport isCollection from '@stdlib/assert-is-collection';\nimport Uint8Array from '@stdlib/array-uint8';\nimport gcopy from '@stdlib/blas-base-gcopy';\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport PRIVATE_BUFFER from './private_buffer.js';\n\n\n// MAIN //\n\n/**\n* Returns a function for writing field data.\n*\n* @private\n* @param {Object} obj - field object\n* @returns {Function} function for writing field data\n*/\nfunction setStructArray( obj ) {\n\treturn setter;\n\n\t/**\n\t* Writes a list of `struct` instances to an underlying byte buffer.\n\t*\n\t* @private\n\t* @param {Collection<Object>} values - list of `struct` instances\n\t* @throws {TypeError} must provide an array-like object\n\t* @throws {RangeError} must provide an array-like object having an expected length\n\t* @throws {TypeError} cannot cast provided values to field data type\n\t*/\n\tfunction setter( values ) {\n\t\tvar offset;\n\t\tvar views;\n\t\tvar view;\n\t\tvar dest;\n\t\tvar src;\n\t\tvar buf;\n\t\tvar nb;\n\t\tvar i;\n\n\t\tif ( !isCollection( values ) ) {\n\t\t\tthrow new TypeError( format( 'invalid assignment. `%s` must be an array-like object. Value: `%s`.', obj.name, values ) );\n\t\t}\n\t\tif ( values.length !== obj.length ) {\n\t\t\tthrow new RangeError( format( 'invalid assignment. `%s` must be an array-like object having length %u.', obj.name, obj.length ) );\n\t\t}\n\t\tif ( obj.casting === 'none' ) {\n\t\t\tfor ( i = 0; i < values.length; i++ ) {\n\t\t\t\tif ( !( values[ i ] instanceof obj.type ) ) { // note: this check will fail for cross-realm `struct` instances\n\t\t\t\t\tthrow new TypeError( format( 'invalid assignment. Assigned value cannot be cast to the data type of `%s`. Value: `%s`.', obj.name, values[ i ] ) );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// Compute the expected number of bytes per struct view:\n\t\tnb = obj.byteLength / obj.length; // note: as a field is expected to have a homogeneous data type, the byte length should be evenly divisible by the number of elements\n\n\t\t// Check that all struct instances have the same byte length...\n\t\tviews = [];\n\t\tfor ( i = 0; i < values.length; i++ ) {\n\t\t\tbuf = this.constructor.viewOf( values[ i ] );\n\t\t\tif ( buf.byteLength !== nb ) {\n\t\t\t\tthrow new RangeError( format( 'invalid assignment. `%s` must be an array-like object containing `struct` instances having the same byte length.', obj.name ) );\n\t\t\t}\n\t\t\tsrc = new Uint8Array( buf.buffer, buf.byteOffset, nb );\n\t\t\tviews.push( src );\n\t\t}\n\t\t// Write the data for each `struct` to the underlying byte buffer...\n\t\tview = this[ PRIVATE_BUFFER ];\n\t\toffset = view.byteOffset + obj.byteOffset;\n\t\tfor ( i = 0; i < values.length; i++ ) {\n\t\t\tdest = new Uint8Array( view.buffer, offset, nb );\n\t\t\tgcopy( obj.length, views[ i ], 1, dest, 1 );\n\t\t\toffset += nb;\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default setStructArray;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-invalid-this, max-len */\n\n'use strict';\n\n// MODULES //\n\nimport isCollection from '@stdlib/assert-is-collection';\nimport isAllowedCast from '@stdlib/ndarray-base-assert-is-allowed-data-type-cast';\nimport isComplexDataType from '@stdlib/array-base-assert-is-complex-floating-point-data-type';\nimport isBooleanDataType from '@stdlib/array-base-assert-is-boolean-data-type';\nimport isRealDataType from '@stdlib/array-base-assert-is-real-data-type';\nimport typedarray from '@stdlib/array-typed';\nimport dtype from '@stdlib/array-dtype';\nimport reinterpretComplex from '@stdlib/strided-base-reinterpret-complex';\nimport reinterpretBoolean from '@stdlib/strided-base-reinterpret-boolean';\nimport gcopy from '@stdlib/blas-base-gcopy';\nimport gfill from '@stdlib/blas-ext-base-gfill';\nimport map from '@stdlib/array-base-map';\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport PRIVATE_BUFFER from './private_buffer.js';\nimport isStructInstance from './is_struct_instance.js';\nimport number2boolean from './number2boolean.js';\nimport complex2boolean from './complex2boolean.js';\nimport complex2number from './complex2number.js';\n\n\n// MAIN //\n\n/**\n* Returns a function for writing field data.\n*\n* @private\n* @param {Object} obj - field object\n* @returns {Function} function for writing field data\n*/\nfunction setTypedArray( obj ) {\n\treturn setter;\n\n\t/**\n\t* Writes a list of values to a typed array view of an underlying byte buffer.\n\t*\n\t* @private\n\t* @param {Collection} value - value to set\n\t* @throws {TypeError} must provide an array-like object\n\t* @throws {RangeError} must provide an array-like object having an expected length\n\t* @throws {TypeError} cannot cast provided values to field data type\n\t*/\n\tfunction setter( value ) {\n\t\tvar view;\n\t\tvar buf;\n\t\tvar dt;\n\t\tif ( !isCollection( value ) || isStructInstance( value ) ) {\n\t\t\tthrow new TypeError( format( 'invalid assignment. `%s` must be an array-like object. Value: `%s`.', obj.name, value ) );\n\t\t}\n\t\tif ( value.length !== obj.length ) {\n\t\t\tthrow new RangeError( format( 'invalid assignment. `%s` must be an array-like object having length %u.', obj.name, obj.length ) );\n\t\t}\n\t\tdt = dtype( value );\n\t\tif ( !isAllowedCast( dt, obj.type, obj.castingMode ) ) {\n\t\t\tthrow new TypeError( format( 'invalid assignment. Assigned value cannot be cast to the data type of `%s`. Data types: [%s, %s].', obj.name, obj.type, dt ) );\n\t\t}\n\t\tbuf = this[ PRIVATE_BUFFER ];\n\t\tview = typedarray( buf.buffer, buf.byteOffset+obj.byteOffset, obj.length, obj.type );\n\t\tif ( dt === obj.type ) {\n\t\t\t// Case: complex => complex\n\t\t\tif ( isComplexDataType( dt ) ) {\n\t\t\t\tgcopy( obj.length*2, reinterpretComplex( value, 0 ), 1, reinterpretComplex( view, 0 ), 1 );\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// Case: boolean => boolean\n\t\t\tif ( isBooleanDataType( dt ) ) {\n\t\t\t\tgcopy( obj.length, reinterpretBoolean( value, 0 ), 1, reinterpretBoolean( view, 0 ), 1 );\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// Case: real => real\n\t\t\tgcopy( obj.length, value, 1, view, 1 );\n\t\t\treturn;\n\t\t}\n\t\t// Case: real => ???\n\t\tif ( isRealDataType( dt ) ) {\n\t\t\t// Case: real => real\n\t\t\tif ( isRealDataType( obj.type ) ) {\n\t\t\t\tgcopy( obj.length, value, 1, view, 1 );\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// Case: real => complex\n\t\t\tif ( isComplexDataType( obj.type ) ) {\n\t\t\t\tview = reinterpretComplex( view, 0 );\n\n\t\t\t\t// TODO: consider refactoring to avoid two-passes; may require creating a separate strided utility explicitly aimed at casting real-valued arrays to complex arrays\n\t\t\t\tgcopy( obj.length, view, 2, value, 1 ); // assign to only real-components\n\t\t\t\tgfill.ndarray( obj.length, 0.0, view, 2, 1 ); // fill imaginary components with zeros\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// Case: real => boolean\n\t\t\tmap.assign( value, view, 1, 0, number2boolean );\n\t\t\treturn;\n\t\t}\n\t\t// Case: complex => ???\n\t\tif ( isComplexDataType( dt ) ) {\n\t\t\t// Case: complex => real\n\t\t\tif ( isRealDataType( obj.type ) ) {\n\t\t\t\tmap.assign( value, view, 1, 0, complex2number ); // discard imaginary components\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// Case: complex => complex\n\t\t\tif ( isComplexDataType( obj.type ) ) {\n\t\t\t\tgcopy( obj.length*2, reinterpretComplex( value, 0 ), 1, reinterpretComplex( view, 0 ), 1 );\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// Case: complex => boolean\n\t\t\tmap.assign( value, view, 1, 0, complex2boolean );\n\t\t\treturn;\n\t\t}\n\t\t// Case: boolean => ???\n\n\t\t// Case: boolean => real\n\t\tif ( isRealDataType( obj.type ) ) {\n\t\t\tgcopy( obj.length, reinterpretBoolean( value, 0 ), 1, view, 1 );\n\t\t\treturn;\n\t\t}\n\t\t// Case: boolean => complex\n\t\tview = reinterpretComplex( view, 0 );\n\n\t\t// TODO: consider refactoring to avoid two-passes; may require creating a separate strided utility explicitly aimed at casting real-valued arrays to complex arrays\n\t\tgcopy( obj.length, view, 2, reinterpretBoolean( value, 0 ), 1 ); // assign to only real-components\n\t\tgfill.ndarray( obj.length, 0.0, view, 2, 1 ); // fill imaginary components with zeros\n\t}\n}\n\n\n// EXPORTS //\n\nexport default setTypedArray;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nimport IS_LITTLE_ENDIAN from '@stdlib/assert-is-little-endian';\nimport isRealFloatingPointDataType from '@stdlib/array-base-assert-is-real-floating-point-data-type'; // eslint-disable-line id-length\nimport isSignedIntegerDataType from '@stdlib/array-base-assert-is-signed-integer-data-type';\nimport { isPrimitive as isNumber } from '@stdlib/assert-is-number';\nimport { isPrimitive as isBoolean } from '@stdlib/assert-is-boolean';\nimport { isPrimitive as isInteger } from '@stdlib/assert-is-integer';\nimport { isPrimitive as isBigInt } from '@stdlib/assert-is-bigint';\nimport isComplexLike from '@stdlib/assert-is-complex-like';\nimport isAllowedCast from '@stdlib/ndarray-base-assert-is-allowed-data-type-cast';\nimport minDataType from '@stdlib/array-min-dtype';\nimport minSignedIntegerDataType from '@stdlib/array-base-min-signed-integer-dtype';\nimport complexDType from '@stdlib/complex-dtype';\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport boolean2number from './boolean2number.js';\nimport bigint2number from './bigint2number.js';\nimport PRIVATE_BUFFER from './private_buffer.js';\nimport defaults from './defaults.json';\n\n\n// MAIN //\n\n/**\n* Returns a function for writing field data.\n*\n* @private\n* @param {Object} obj - field object\n* @param {string} method - data view method name\n* @returns {Function} function for writing field data\n*/\nfunction setNumber( obj, method ) {\n\treturn setter;\n\n\t/**\n\t* Writes a number value to an underlying byte buffer.\n\t*\n\t* @private\n\t* @param {*} value - value to set\n\t* @throws {TypeError} cannot cast provided values to field data type\n\t*/\n\tfunction setter( value ) {\n\t\tvar view;\n\t\tvar dt;\n\t\tvar v;\n\t\tif ( isNumber( value ) ) {\n\t\t\tif ( isRealFloatingPointDataType( obj.type ) ) {\n\t\t\t\tdt = obj.type;\n\t\t\t} else if ( !isInteger( value ) ) {\n\t\t\t\tdt = defaults.dtypes.real;\n\t\t\t} else if ( isSignedIntegerDataType( obj.type ) ) {\n\t\t\t\tdt = minSignedIntegerDataType( value );\n\t\t\t} else {\n\t\t\t\tdt = minDataType( value );\n\t\t\t}\n\t\t\tv = value;\n\t\t} else if ( isComplexLike( value ) ) {\n\t\t\tdt = complexDType( value ) || ( ( obj.type === 'float32' ) ? 'complex64' : 'complex128' );\n\t\t\tv = value.re; // discard imaginary component\n\t\t} else if ( isBoolean( value ) ) {\n\t\t\tdt = 'bool';\n\t\t\tv = boolean2number( value );\n\t\t} else if ( isBigInt( value ) ) {\n\t\t\tdt = 'int64'; // note: the specific integer data type (int64 vs uint64) should not matter here\n\t\t\tv = bigint2number( value );\n\t\t} else {\n\t\t\tdt = 'generic';\n\t\t\tv = value;\n\t\t}\n\t\tif ( !isAllowedCast( dt, obj.type, obj.castingMode ) ) {\n\t\t\tthrow new TypeError( format( 'invalid assignment. Assigned value cannot be cast to the data type of `%s`. Data types: [%s, %s].', obj.name, obj.type, dt ) );\n\t\t}\n\t\tview = this[ PRIVATE_BUFFER ];\n\t\tview[ method ]( obj.byteOffset, v, IS_LITTLE_ENDIAN );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default setNumber;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-invalid-this, max-len */\n\n'use strict';\n\n// MODULES //\n\nimport IS_LITTLE_ENDIAN from '@stdlib/assert-is-little-endian';\nimport { isPrimitive as isNumber } from '@stdlib/assert-is-number';\nimport { isPrimitive as isBoolean } from '@stdlib/assert-is-boolean';\nimport { isPrimitive as isBigInt } from '@stdlib/assert-is-bigint';\nimport isComplexLike from '@stdlib/assert-is-complex-like';\nimport isAllowedCast from '@stdlib/ndarray-base-assert-is-allowed-data-type-cast';\nimport complexDType from '@stdlib/complex-dtype';\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport boolean2number from './boolean2number.js';\nimport bigint2number from './bigint2number.js';\nimport PRIVATE_BUFFER from './private_buffer.js';\n\n\n// MAIN //\n\n/**\n* Returns a function for writing field data.\n*\n* @private\n* @param {Object} obj - field object\n* @param {string} method - data view method name\n* @returns {Function} function for writing field data\n*/\nfunction setComplex( obj, method ) {\n\treturn setter;\n\n\t/**\n\t* Writes a complex number to an underlying byte buffer.\n\t*\n\t* @private\n\t* @param {*} value - value to set\n\t* @throws {TypeError} cannot cast provided values to field data type\n\t*/\n\tfunction setter( value ) {\n\t\tvar view;\n\t\tvar dt;\n\t\tvar re;\n\t\tvar im;\n\t\tif ( isComplexLike( value ) ) {\n\t\t\tdt = complexDType( value ) || obj.type;\n\t\t\tre = value.re;\n\t\t\tim = value.im;\n\t\t} else if ( isNumber( value ) ) {\n\t\t\tdt = ( obj.type === 'complex64' ) ? 'float32' : 'float64';\n\t\t\tre = value;\n\t\t\tim = 0.0;\n\t\t} else if ( isBigInt( value ) ) {\n\t\t\tdt = 'int64'; // note: the specific integer data type (int64 vs uint64) should not matter here\n\t\t\tre = bigint2number( value );\n\t\t\tim = 0.0;\n\t\t} else if ( isBoolean( value ) ) {\n\t\t\tdt = 'bool';\n\t\t\tre = boolean2number( value );\n\t\t\tim = 0.0;\n\t\t} else {\n\t\t\tdt = 'generic';\n\t\t\tre = value;\n\t\t\tim = 0.0;\n\t\t}\n\t\tif ( !isAllowedCast( dt, obj.type, obj.castingMode ) ) {\n\t\t\tthrow new TypeError( format( 'invalid assignment. Assigned value cannot be cast to the data type of `%s`. Data types: [%s, %s].', obj.name, obj.type, dt ) );\n\t\t}\n\t\tview = this[ PRIVATE_BUFFER ];\n\t\tview[ method ]( obj.byteOffset, re, IS_LITTLE_ENDIAN );\n\t\tview[ method ]( obj.byteOffset+(obj.byteLength/2), im, IS_LITTLE_ENDIAN );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default setComplex;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nimport Uint8Array from '@stdlib/array-uint8';\nimport gcopy from '@stdlib/blas-base-gcopy';\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport PRIVATE_BUFFER from './private_buffer.js';\nimport isStructInstance from './is_struct_instance.js';\n\n\n// MAIN //\n\n/**\n* Returns a function for writing field data.\n*\n* @private\n* @param {Object} obj - field object\n* @returns {Function} function for writing field data\n*/\nfunction setStruct( obj ) {\n\treturn setter;\n\n\t/**\n\t* Writes `struct` data to an underlying byte buffer.\n\t*\n\t* @private\n\t* @param {Object} value - value to set\n\t* @throws {TypeError} must be a `struct` instance\n\t* @throws {RangeError} must be a `struct` instance having the same byte length\n\t* @throws {TypeError} cannot cast provided values to field data type\n\t*/\n\tfunction setter( value ) {\n\t\tvar view;\n\t\tvar dest;\n\t\tvar src;\n\t\tvar buf;\n\t\tvar nb;\n\t\tif ( !isStructInstance( value ) ) {\n\t\t\tthrow new TypeError( format( 'invalid assignment. `%s` must be a `struct` instance. Value: `%s`.', obj.name, value ) );\n\t\t}\n\t\tif ( obj.casting === 'none' && !( value instanceof obj.type ) ) {\n\t\t\tthrow new TypeError( format( 'invalid assignment. Assigned value cannot be cast to the data type of `%s`. Value: `%s`.', obj.name, value ) );\n\t\t}\n\t\tnb = obj.byteLength;\n\n\t\tbuf = this.constructor.viewOf( value );\n\t\tif ( buf.byteLength !== nb ) {\n\t\t\tthrow new RangeError( format( 'invalid assignment. `%s` must be a `struct` instance having the same byte length.', obj.name ) );\n\t\t}\n\t\tsrc = new Uint8Array( buf.buffer, buf.byteOffset, nb );\n\n\t\tview = this[ PRIVATE_BUFFER ];\n\t\tdest = new Uint8Array( view.buffer, view.byteOffset+obj.byteOffset, nb ); // eslint-disable-line max-len\n\n\t\tgcopy( obj.length, src, 1, dest, 1 );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default setStruct;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar FIELD_PROPERTIES = [\n\t'name',\n\t'type',\n\t'description',\n\t'length',\n\t'enumerable',\n\t'writable',\n\t'default',\n\t'castingMode'\n];\n\n\n// EXPORTS //\n\nexport default FIELD_PROPERTIES;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isCollection from '@stdlib/assert-is-collection';\n\n\n// MAIN //\n\n/**\n* Returns a boolean indicating whether a field object represents a union type.\n*\n* @private\n* @param {Object} obj - input field object\n* @returns {boolean} result\n*/\nfunction isUnionType( obj ) {\n\treturn obj.type === 'union' && isCollection( obj.fields );\n}\n\n\n// EXPORTS //\n\nexport default isUnionType;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isPositiveInteger } from '@stdlib/assert-is-positive-integer';\nimport isFunction from '@stdlib/assert-is-function';\n\n\n// MAIN //\n\n/**\n* Returns a boolean indicating if a value is a `struct` constructor.\n*\n* @private\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a `struct` constructor\n*/\nfunction isStructType( value ) {\n\treturn (\n\t\tisFunction( value ) &&\n\t\tisPositiveInteger( value.alignment ) &&\n\t\tisPositiveInteger( value.byteLength ) &&\n\t\tisFunction( value.byteLengthOf ) &&\n\t\tisFunction( value.byteOffsetOf ) &&\n\t\tisFunction( value.bufferOf ) &&\n\t\tisFunction( value.viewOf )\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isStructType;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isBoolean } from '@stdlib/assert-is-boolean';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// MAIN //\n\n/**\n* Tests whether a provided value is a valid boolean field.\n*\n* @private\n* @param {*} value - input value\n* @param {string} name - field name\n* @returns {(null|TypeError)} error object or null\n*/\nfunction isValidBoolean( value, name ) {\n\tif ( isBoolean( value ) ) {\n\t\treturn null;\n\t}\n\treturn new TypeError( format( 'invalid argument. `%s` field must be a boolean. Value: `%s`.', name, value ) );\n}\n\n\n// EXPORTS //\n\nexport default isValidBoolean;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar DTYPES = [\n\t'int8',\n\t'int16',\n\t'int32',\n\t'int64',\n\n\t'uint8',\n\t'uint16',\n\t'uint32',\n\t'uint64',\n\n\t// 'float16', // TODO: uncomment once supported\n\n\t'float32',\n\t'float64',\n\n\t// 'complex32', // TODO: uncomment once supported\n\n\t'complex64',\n\t'complex128',\n\n\t'bool'\n];\n\n\n// EXPORTS //\n\nexport default DTYPES;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar CASTING_MODES = [\n\t'none',\n\t'safe',\n\t'mostly-safe',\n\t'same-kind',\n\t'unsafe'\n];\n\n\n// EXPORTS //\n\nexport default CASTING_MODES;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport contains from '@stdlib/array-base-assert-contains';\nimport join from '@stdlib/array-base-join';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// MAIN //\n\n/**\n* Returns a function for testing whether a provided value is a valid enumerated field.\n*\n* @private\n* @param {Collection} values - list of possible values\n* @returns {Function} output function\n*/\nfunction isValidOneOf( values ) {\n\treturn isValid;\n\n\t/**\n\t* Tests whether a provided value is a valid enumerated field.\n\t*\n\t* @private\n\t* @param {*} value - input value\n\t* @param {string} name - field name\n\t* @returns {(null|TypeError)} error object or null\n\t*/\n\tfunction isValid( value, name ) {\n\t\tif ( contains( values, value ) ) {\n\t\t\treturn null;\n\t\t}\n\t\treturn new TypeError( format( 'invalid argument. `%s` field must be one of the following: \"%s\". Value: `%s`.', name, join( values, ', ' ), value ) );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default isValidOneOf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar ALIGNMENTS = {\n\t'int8': 1,\n\t'int16': 2,\n\t'int32': 4,\n\t'int64': 8,\n\n\t'uint8': 1,\n\t'uint16': 2,\n\t'uint32': 4,\n\t'uint64': 8,\n\n\t'float16': 2,\n\t'float32': 4,\n\t'float64': 8,\n\n\t'complex32': 2,  // same as float16\n\t'complex64': 4,  // same as float32\n\t'complex128': 8, // same as float64\n\n\t'bool': 1\n};\n\n\n// EXPORTS //\n\nexport default ALIGNMENTS;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport hasProp from '@stdlib/assert-has-property';\nimport join from '@stdlib/array-base-join';\nimport constantFunction from '@stdlib/utils-constant-function';\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport hasProperties from './has_properties.js';\nimport isStructType from './is_struct_type.js';\nimport isValidNonEmptyString from './is_valid_nonempty_string.js';\nimport isValidString from './is_valid_string.js';\nimport isValidPositiveInteger from './is_valid_positive_integer.js';\nimport isValidBoolean from './is_valid_boolean.js';\nimport isValidType from './is_valid_type.js';\nimport isValidOneOf from './is_valid_one_of.js';\nimport initFieldObject from './init_field_object.js';\nimport byteLength from './byte_length.js';\nimport CASTING_MODES from './casting_modes.js';\nimport ALIGNMENTS from './alignments.js';\n\n\n// VARIABLES //\n\nvar MANDATORY_FIELD_NAMES = [\n\t'name',\n\t'type'\n];\n\nvar VALIDATORS = {\n\t'name': isValidNonEmptyString,\n\t'type': isValidType,\n\t'description': isValidString,\n\t'length': isValidPositiveInteger,\n\t'enumerable': isValidBoolean,\n\t'writable': isValidBoolean,\n\t'default': constantFunction( null ),\n\t'castingMode': isValidOneOf( CASTING_MODES )\n};\n\n\n// MAIN //\n\n/**\n* Normalizes a provided field object.\n*\n* @private\n* @param {Object} obj - input field object\n* @param {Array<string>} keys - list of keys to standardize\n* @returns {(Object|Error)} output object or an error\n*/\nfunction normalize( obj, keys ) {\n\tvar out;\n\tvar err;\n\tvar v;\n\tvar k;\n\tvar i;\n\n\tout = initFieldObject();\n\tfor ( i = 0; i < keys.length; i++ ) {\n\t\tk = keys[ i ];\n\t\tif ( hasProp( obj, k ) ) {\n\t\t\tv = obj[ k ];\n\t\t\terr = VALIDATORS[ k ]( v, k );\n\t\t\tif ( err ) {\n\t\t\t\treturn err;\n\t\t\t}\n\t\t\tout[ k ] = v;\n\t\t}\n\t}\n\tif ( !hasProperties( out, MANDATORY_FIELD_NAMES ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Field objects must have the following properties: \"%s\". Value: `%s`.', join( MANDATORY_FIELD_NAMES, ', ' ), JSON.stringify( obj ) ) );\n\t}\n\tout.isStructType = isStructType( out.type );\n\tout.byteLength = byteLength( out );\n\tif ( out.isStructType ) {\n\t\tout.alignment = out.type.alignment;\n\t} else {\n\t\tout.alignment = ALIGNMENTS[ out.type ];\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default normalize;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isString } from '@stdlib/assert-is-string';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// MAIN //\n\n/**\n* Tests whether a provided value is a valid string field.\n*\n* @private\n* @param {*} value - input value\n* @param {string} name - field name\n* @returns {(null|TypeError)} error object or null\n*/\nfunction isValidNonEmptyString( value, name ) {\n\tif ( isString( value ) || value.length > 0 ) {\n\t\treturn null;\n\t}\n\treturn new TypeError( format( 'invalid argument. `%s` field must be a non-empty string. Value: `%s`.', name, value ) );\n}\n\n\n// EXPORTS //\n\nexport default isValidNonEmptyString;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport contains from '@stdlib/array-base-assert-contains';\nimport join from '@stdlib/array-base-join';\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport isStructType from './is_struct_type.js';\nimport DTYPES from './dtypes.js';\n\n\n// MAIN //\n\n/**\n* Tests whether a provided value is a valid `type` field.\n*\n* @private\n* @param {*} value - input value\n* @returns {(null|TypeError)} error object or null\n*/\nfunction isValidType( value ) {\n\tif ( contains( DTYPES, value ) || isStructType( value ) ) {\n\t\treturn null;\n\t}\n\treturn new TypeError( format( 'invalid argument. `%s` field must be either a struct type or one of the following: \"%s\". Value: `%s`.', 'type', join( DTYPES, ', ' ), value ) );\n}\n\n\n// EXPORTS //\n\nexport default isValidType;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isString } from '@stdlib/assert-is-string';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// MAIN //\n\n/**\n* Tests whether a provided value is a valid string field.\n*\n* @private\n* @param {*} value - input value\n* @param {string} name - field name\n* @returns {(null|TypeError)} error object or null\n*/\nfunction isValidString( value, name ) {\n\tif ( isString( value ) ) {\n\t\treturn null;\n\t}\n\treturn new TypeError( format( 'invalid argument. `%s` field must be a string. Value: `%s`.', name, value ) );\n}\n\n\n// EXPORTS //\n\nexport default isValidString;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isPositiveInteger } from '@stdlib/assert-is-positive-integer';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// MAIN //\n\n/**\n* Tests whether a provided value is a valid positive integer field.\n*\n* @private\n* @param {*} value - input value\n* @param {string} name - field name\n* @returns {(null|TypeError)} error object or null\n*/\nfunction isValidPositiveInteger( value, name ) {\n\tif ( isPositiveInteger( value ) ) {\n\t\treturn null;\n\t}\n\treturn new TypeError( format( 'invalid argument. `%s` field must be a positive integer. Value: `%s`.', name, value ) );\n}\n\n\n// EXPORTS //\n\nexport default isValidPositiveInteger;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns an initialized field object.\n*\n* @private\n* @returns {Object} initialized field object\n*/\nfunction initFieldObject() {\n\treturn {\n\t\t'isStructType': false,\n\t\t'description': '',\n\t\t'byteLength': 0,\n\t\t'byteOffset': 0,\n\t\t'alignment': 0,\n\t\t'padding': 0,\n\t\t'enumerable': true,\n\t\t'writable': true,\n\t\t'default': void 0, // explicitly set to `undefined`\n\t\t'castingMode': 'none'\n\t};\n}\n\n\n// EXPORTS //\n\nexport default initFieldObject;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport hasProp from '@stdlib/assert-has-property';\n\n\n// MAIN //\n\n/**\n* Tests whether an object has a list of properties.\n*\n* @private\n* @param {Object} obj - input object\n* @param {Array<string>} keys - list of property names\n* @returns {boolean} result\n*/\nfunction hasProperties( obj, keys ) {\n\tvar i;\n\tfor ( i = 0; i < keys.length; i++ ) {\n\t\tif ( !hasProp( obj, keys[ i ] ) ) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\n\n// EXPORTS //\n\nexport default hasProperties;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport bytesPerElement from '@stdlib/ndarray-base-bytes-per-element';\n\n\n// MAIN //\n\n/**\n* Returns the number of bytes required to store a field value.\n*\n* @private\n* @param {Object} obj - input field object\n* @returns {PositiveInteger} number of bytes\n*/\nfunction byteLength( obj ) {\n\tvar nb;\n\tif ( obj.isStructType ) {\n\t\tnb = obj.type.byteLength;\n\t} else {\n\t\tnb = bytesPerElement( obj.type );\n\t}\n\tif ( obj.length ) {\n\t\tnb *= obj.length;\n\t}\n\treturn nb;\n}\n\n\n// EXPORTS //\n\nexport default byteLength;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Resolves the struct's byte alignment.\n*\n* @private\n* @param {Array<Object>} fields - list of normalized field objects\n* @returns {PositiveInteger} alignment\n*/\nfunction alignment( fields ) {\n\tvar max;\n\tvar v;\n\tvar i;\n\n\tmax = 0;\n\tfor ( i = 0; i < fields.length; i++ ) {\n\t\tv = fields[ i ].alignment;\n\t\tif ( v > max ) {\n\t\t\tmax = v;\n\t\t}\n\t}\n\treturn max;\n}\n\n\n// EXPORTS //\n\nexport default alignment;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isObject from '@stdlib/assert-is-object';\nimport hasProp from '@stdlib/assert-has-property';\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport isUnionType from './is_union_type.js';\nimport FIELD_PROPERTIES from './field_properties.js';\nimport normalizeField from './normalize_field.js';\nimport resolveAlignment from './resolve_alignment.js';\n\n\n// MAIN //\n\n/**\n* Normalizes a field object representing a union type.\n*\n* @private\n* @param {Object} obj - input field object\n* @returns {(Object|null|Error)} normalized field object or error object\n*/\nfunction normalizeUnion( obj ) {\n\tvar fields;\n\tvar dflg;\n\tvar out;\n\tvar tmp;\n\tvar len;\n\tvar o;\n\tvar i;\n\n\tfields = obj.fields;\n\tif ( fields.length === 0 ) {\n\t\treturn null;\n\t}\n\tout = [];\n\tfor ( i = 0; i < fields.length; i++ ) {\n\t\to = fields[ i ];\n\t\tif ( !isObject( o ) ) {\n\t\t\treturn null;\n\t\t}\n\t\tif ( isUnionType( o ) ) {\n\t\t\treturn new TypeError( format( 'invalid argument. Union types cannot contain nested union types. Value: `%s`.', JSON.stringify( fields ) ) );\n\t\t}\n\t\tif ( dflg === void 0 && hasProp( o, 'default' ) ) {\n\t\t\tdflg = true;\n\t\t} else if ( dflg === true && hasProp( o, 'default' ) ) {\n\t\t\treturn new TypeError( format( 'invalid argument. Union types can only contain one field with a default value. Value: `%s`.', JSON.stringify( fields ) ) );\n\t\t}\n\t\ttmp = normalizeField( o, FIELD_PROPERTIES );\n\t\tif ( tmp instanceof Error ) {\n\t\t\treturn tmp;\n\t\t}\n\t\tif ( i === 0 ) {\n\t\t\tlen = tmp.byteLength;\n\t\t} else if ( tmp.byteLength !== len ) {\n\t\t\treturn new RangeError( format( 'invalid argument. Union types must contain fields having the same byte length. Value: `%s`.', JSON.stringify( fields ) ) );\n\t\t}\n\t\tout.push( tmp );\n\t}\n\treturn {\n\t\t'type': 'union',\n\t\t'fields': out,\n\t\t'byteLength': len,\n\t\t'byteOffset': 0,\n\t\t'alignment': resolveAlignment( out ),\n\t\t'padding': 0\n\t};\n}\n\n\n// EXPORTS //\n\nexport default normalizeUnion;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport indexOf from '@stdlib/array-base-index-of';\nimport join from '@stdlib/array-base-join';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// MAIN //\n\n/**\n* Returns the index of a specified field name in a provided list of field names.\n*\n* @private\n* @param {Array<string>} names - list of field names\n* @param {string} name - field name\n* @throws {Error} struct must have at least one field\n* @throws {TypeError} must provide a recognized field name\n* @returns {(integer|Error)} index or an error object\n*/\nfunction fieldIndex( names, name ) {\n\tvar idx;\n\tif ( names.length === 0 ) {\n\t\treturn new Error( 'invalid operation. struct does not have any fields.' );\n\t}\n\tidx = indexOf( names, name, 0 );\n\tif ( idx < 0 ) {\n\t\treturn new TypeError( format( 'invalid argument. Field name must be one of the following: \"%s\". Value: `%s`.', join( names, ', ' ), name ) );\n\t}\n\treturn idx;\n}\n\n\n// EXPORTS //\n\nexport default fieldIndex;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport min from '@stdlib/math-base-special-fast-min';\nimport isUnionType from './is_union_type.js';\n\n\n// FUNCTIONS //\n\n/**\n* Sets alignment padding for one or more field objects.\n*\n* ## Notes\n*\n* -   This function mutates each field object.\n*\n* @private\n* @param {Array<Object>} fields - list of normalized field objects\n* @param {NonNegativeInteger} padding - alignment padding\n* @returns {Array<Object>} input array\n*/\nfunction setPadding( fields, padding ) {\n\tvar i;\n\tfor ( i = 0; i < fields.length; i++ ) {\n\t\tfields[ i ].padding = padding;\n\t}\n\treturn fields;\n}\n\n\n// MAIN //\n\n/**\n* Computes the byte offset for each field.\n*\n* ## Notes\n*\n* -   This function mutates each field object.\n*\n* @private\n* @param {Array<Object>} fields - list of normalized field objects\n* @param {PositiveInteger} max - maximum alignment\n* @returns {Array<Object>} input array\n*/\nfunction byteOffsets( fields, max ) {\n\tvar alignment;\n\tvar padding;\n\tvar offset;\n\tvar tmp;\n\tvar o;\n\tvar i;\n\tvar j;\n\n\toffset = 0;\n\tfor ( i = 0; i < fields.length; i++ ) {\n\t\to = fields[ i ];\n\n\t\t// Resolve the alignment requirement for this field:\n\t\talignment = min( o.alignment, max );\n\n\t\t// Align the current offset to the required boundary:\n\t\tpadding = ( alignment-(offset%alignment) ) % alignment;\n\t\toffset += padding;\n\n\t\t// Set the padding for the previous member:\n\t\tif ( i > 0 ) {\n\t\t\ttmp = fields[ i-1 ];\n\t\t\ttmp.padding = padding;\n\t\t\tif ( isUnionType( o ) ) {\n\t\t\t\tsetPadding( tmp.fields, padding );\n\t\t\t}\n\t\t}\n\t\t// Set the offset for the current member:\n\t\to.byteOffset = offset;\n\n\t\t// If the current member is a union type, propagate the offset to its child field objects...\n\t\tif ( isUnionType( o ) ) {\n\t\t\tfor ( j = 0; j < o.fields.length; j++ ) {\n\t\t\t\to.fields[ j ].byteOffset = offset;\n\t\t\t}\n\t\t}\n\t\t// Advance the offset by the size, in bytes, of the member:\n\t\toffset += o.byteLength;\n\t}\n\t// Compute the padding for the last member:\n\tpadding = ( alignment - (offset%alignment) ) % alignment;\n\n\t// Set the padding for the last member:\n\to.padding = padding;\n\n\t// If the last member is a union type, propagate the offset to its child field objects...\n\tif ( isUnionType( o ) ) {\n\t\tsetPadding( o.fields, padding );\n\t}\n\n\treturn fields;\n}\n\n\n// EXPORTS //\n\nexport default byteOffsets;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport replace from '@stdlib/string-base-replace';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// FUNCTIONS //\n\n/**\n* Returns a new regular expression for matching byte parameters.\n*\n* @private\n* @returns {RegExp} regular expression\n*/\nfunction reByteOffset() {\n\treturn /\\[(\\d{1,}),/g;\n}\n\n/**\n* Returns a function for replacing byte values in a serialized struct.\n*\n* @private\n* @param {NonNegativeInteger} offset - byte offset\n* @returns {Function} replacer function\n*/\nfunction replacer( offset ) {\n\treturn wrapped;\n\n\t/**\n\t* Callback invoked for each match.\n\t*\n\t* @private\n\t* @param {string} match - matched substring\n\t* @param {string} p1 - first matched capture group substring\n\t* @returns {string} replacement string\n\t*/\n\tfunction wrapped( match, p1 ) {\n\t\treturn format( '[%u,', offset+parseInt( p1, 10 ) );\n\t}\n}\n\n\n// MAIN //\n\n/**\n* Serializes a struct to a layout format.\n*\n* ## Notes\n*\n* -   The output format is a multi-column format having the following layout:\n*\n*     ```text\n*     | ...<dtype(s)>[byte_offset,byte_length] |\n*     ```\n*\n*     For example,\n*\n*     ```text\n*     |<double>[0,8]|<bool>[8,1]|<double>[16,16]|<double,uint32>[32,8]|\n*     ```\n*\n* @private\n* @param {Array<Object>} fields - list of normalized fields\n* @returns {string} string representation\n*/\nfunction layoutFormat( fields ) {\n\tvar out;\n\tvar tmp;\n\tvar re;\n\tvar N;\n\tvar o;\n\tvar i;\n\n\tN = fields.length;\n\n\t// Create a new regular expression for matching byte offsets:\n\tre = reByteOffset();\n\n\tout = [];\n\tfor ( i = 0; i < N; i++ ) {\n\t\to = fields[ i ];\n\n\t\t// If we are currently processing fields in a union, move along to the next non-union field...\n\t\tif ( i > 0 && ( o.byteOffset === fields[ i-1 ].byteOffset ) ) {\n\t\t\tcontinue;\n\t\t}\n\t\t// If the current type is a struct, we need to serialize and then post-process...\n\t\tif ( o.isStructType ) {\n\t\t\tout.push( replace( o.type.layout, re, replacer( o.byteOffset ) ) );\n\t\t\tcontinue;\n\t\t}\n\t\t// Format the field data:\n\t\tout.push( format( '|<%s>[%u,%u]', o.type, o.byteOffset, o.byteLength ) );\n\t}\n\ttmp = format( '%s|', out.join( '' ) );\n\n\t// If we having a trailing `||` due to a nested struct, remove the final `|`:\n\tif ( tmp[ tmp.length-2 ] === '|' ) {\n\t\ttmp = tmp.substring( 0, tmp.length-1 );\n\t}\n\treturn tmp;\n}\n\n\n// EXPORTS //\n\nexport default layoutFormat;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPlainObject from '@stdlib/assert-is-plain-object';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport { factory as contains } from '@stdlib/array-base-assert-contains';\nimport join from '@stdlib/array-base-join';\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport linearFormat from './format_linear.js';\nimport layoutFormat from './format_layout.js';\n\n\n// VARIABLES //\n\nvar FORMATS = [\n\t'none',\n\t'linear',\n\t'layout'\n];\nvar isFormat = contains( FORMATS );\n\n\n// MAIN //\n\n/**\n* Serializes a `struct` instance to a string.\n*\n* @private\n* @param {Struct} struct - struct instance\n* @param {Array<Object>} fields - list of normalized fields\n* @param {Options} options - function options\n* @param {string} [options.format] - serialization format\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {string} string representation\n*/\nfunction toString( struct, fields, options ) { // eslint-disable-line stdlib/no-redeclare\n\tvar opts;\n\tif ( !isPlainObject( options ) ) {\n\t\tthrow new TypeError( format( 'null2V', options ) );\n\t}\n\topts = {\n\t\t'format': 'none'\n\t};\n\tif ( hasOwnProp( options, 'format' ) ) {\n\t\topts.format = options.format;\n\t\tif ( !isFormat( opts.format ) ) {\n\t\t\tthrow new TypeError( format( 'null4S', 'format', join( FORMATS, ', ' ), options.format ) );\n\t\t}\n\t}\n\tif ( opts.format === 'linear' ) {\n\t\treturn linearFormat( struct.constructor, fields );\n\t}\n\tif ( opts.format === 'layout' ) {\n\t\treturn layoutFormat( fields );\n\t}\n\t// Case: opts.format === 'none'\n\treturn '<Struct>';\n}\n\n\n// EXPORTS //\n\nexport default toString;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport floor from '@stdlib/math-base-special-floor';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// MAIN //\n\n/**\n* Serializes a struct to a linear string format.\n*\n* ## Notes\n*\n* -   The output format is a three-column format having the following layout:\n*\n*     ```text\n*     | byte_number | [field|padding] | notes |\n*     ```\n*\n* -   Nested `struct` instances are intentionally treated as opaque types, as we have limited access to struct internals (e.g., packed versus unpacked, field padding, etc), and we would effectively have to recompute all alignments and associated field data for the purposes of rendering. A user can always separately render a nested `struct` instance to a string in order to better understand its layout independently of its surrounding context in a parent `struct` instance.\n*\n* @private\n* @param {Function} Struct - struct constructor\n* @param {Array<Object>} fields - list of normalized fields\n* @returns {string} string representation\n*/\nfunction linearFormat( Struct, fields ) {\n\tvar nbytes;\n\tvar fmt0;\n\tvar fmt1;\n\tvar fmt2;\n\tvar bfmt;\n\tvar ufmt;\n\tvar fmt;\n\tvar tmp;\n\tvar out;\n\tvar flg;\n\tvar ib;\n\tvar c0;\n\tvar c1;\n\tvar c2;\n\tvar w0;\n\tvar w1;\n\tvar w;\n\tvar N;\n\tvar o;\n\tvar f;\n\tvar t;\n\tvar i;\n\tvar j;\n\tvar k;\n\n\tN = fields.length;\n\n\t// Resolve the size of the struct:\n\tnbytes = Struct.byteLength;\n\n\t// Compute the width of the first column:\n\tw0 = ( nbytes-1 ).toString().length;\n\n\t// Define a format string for the first column:\n\tfmt0 = '%'+w0+'s';\n\n\t// Determine the longest field name...\n\tw1 = 0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\to = fields[ i ];\n\n\t\t// Format: <name>[<byte_number>]\n\t\tw = o.name.length + 1 + ( o.byteLength-1 ).toString().length + 1;\n\t\tif ( w > w1 ) {\n\t\t\tw1 = w;\n\t\t}\n\t}\n\t// Define a format string for the second column:\n\tfmt1 = '%'+w1+'s';\n\n\t// Define a format string for the third column:\n\tfmt2 = '// %s';\n\n\t// Define a format string which combines the columns:\n\tfmt = '%s: %s   %s';\n\n\t// Initialize a byte counter:\n\tib = 0;\n\n\tout = [];\n\tfor ( i = 0; i < N; i++ ) {\n\t\to = fields[ i ];\n\n\t\t// If we are currently processing fields in a union, move along to the next non-union field...\n\t\tif ( i > 0 && ( o.byteOffset === fields[ i-1 ].byteOffset ) ) {\n\t\t\tcontinue;\n\t\t}\n\t\t// Check whether this field is the first field of a union...\n\t\tif ( i < N-1 ) {\n\t\t\tflg = ( o.byteOffset === fields[ i+1 ].byteOffset );\n\t\t} else {\n\t\t\tflg = false;\n\t\t}\n\t\tfor ( j = 0; j < o.byteLength; j++ ) {\n\t\t\t// In the first column, render the byte number:\n\t\t\tc0 = format( fmt0, ib.toString() );\n\n\t\t\t// In the second column, render the field name and the byte number relative to the field:\n\t\t\tc1 = format( fmt1, format( '%s[%u]', o.name, j ) );\n\n\t\t\t// If a field type spans multiple bytes, render the byte number:\n\t\t\tif ( o.alignment > 1 ) {\n\t\t\t\tbfmt = ' (byte %u)';\n\t\t\t} else {\n\t\t\t\tbfmt = '';\n\t\t\t}\n\t\t\t// If a field is part of a union, make that explicit:\n\t\t\tif ( flg ) {\n\t\t\t\tufmt = ' => union: %s';\n\t\t\t\ttmp = [];\n\t\t\t\tk = i + 1;\n\t\t\t\twhile ( k < N && o.byteOffset === fields[ k ].byteOffset ) {\n\t\t\t\t\tf = fields[ k ];\n\t\t\t\t\tif ( f.isStructType ) {\n\t\t\t\t\t\tt = '<Struct>';\n\t\t\t\t\t} else {\n\t\t\t\t\t\tt = f.type;\n\t\t\t\t\t}\n\t\t\t\t\ttmp.push( format( '%s<%s>[%u]', f.name, t, j%f.alignment ) );\n\t\t\t\t\tk += 1;\n\t\t\t\t}\n\t\t\t\tufmt = format( ufmt, tmp.join( ', ' ) );\n\t\t\t} else {\n\t\t\t\tufmt = '';\n\t\t\t}\n\t\t\ttmp = format( bfmt+ufmt, j%o.alignment );\n\n\t\t\t// If a field contains multiple elements (i.e., is an array), render the field type along with the element number:\n\t\t\tif ( o.length ) {\n\t\t\t\tc2 = format( fmt2, format( '%s[%u]%s', o.type, floor( j/o.alignment ), tmp ) );\n\t\t\t}\n\t\t\t// Otherwise, just render the field type:\n\t\t\telse {\n\t\t\t\tc2 = format( fmt2, format( '%s%s', o.type, tmp ) );\n\t\t\t}\n\t\t\t// Render the row string:\n\t\t\tout.push( format( fmt, c0, c1, c2 ) );\n\t\t\tib += 1;\n\t\t}\n\t\tfor ( j = 0; j < o.padding; j++ ) {\n\t\t\tc0 = format( fmt0, ib.toString() );\n\t\t\tc1 = format( fmt1, '--' );\n\t\t\tc2 = format( fmt2, 'padding' );\n\t\t\tout.push( format( fmt, c0, c1, c2 ) );\n\t\t\tib += 1;\n\t\t}\n\t}\n\treturn out.join( '\\n' );\n}\n\n\n// EXPORTS //\n\nexport default linearFormat;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, id-length, no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport setNonEnumerableReadOnlyAccessor from '@stdlib/utils-define-nonenumerable-read-only-accessor';\nimport { isPrimitive as isNonNegativeInteger } from '@stdlib/assert-is-nonnegative-integer';\nimport isCollection from '@stdlib/assert-is-collection';\nimport isArrayBuffer from '@stdlib/assert-is-arraybuffer';\nimport isObject from '@stdlib/assert-is-object';\nimport hasProp from '@stdlib/assert-has-property';\nimport min from '@stdlib/math-base-special-fast-min';\nimport filled from '@stdlib/array-base-filled';\nimport ArrayBuffer from '@stdlib/array-buffer';\nimport DataView from '@stdlib/array-dataview';\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport PRIVATE_BUFFER from './private_buffer.js';\nimport CTOR_NAME from './ctor_name.js';\nimport createPrototypeAccessors from './create_prototype_accessors.js';\nimport isStructInstance from './is_struct_instance.js';\nimport normalize from './normalize_field_list.js';\nimport fieldNames from './field_names.js';\nimport fieldIndex from './field_index.js';\nimport resolveAlignment from './resolve_alignment.js';\nimport byteOffsets from './byte_offsets.js';\nimport partitions from './partitions.js';\nimport flatten from './flatten_fields.js';\nimport struct2string from './to_string.js';\nimport struct2json from './to_json.js';\nimport layoutFormat from './format_layout.js';\n\n\n// MAIN //\n\n/**\n* Returns a constructor for creating a fixed-width composite data type (a.k.a., a `struct`).\n*\n* @param {ObjectArray} fields - structure fields\n* @throws {TypeError} first argument must be an array-like object containing objects\n* @throws {TypeError} field objects must have required properties\n* @throws {TypeError} field objects must have valid fields\n* @throws {TypeError} union types must be array-like objects containing objects\n* @throws {RangeError} union types must contain fields having the same byte length\n* @throws {TypeError} union types cannot contain nested union types\n* @throws {TypeError} union types can only contain one field with a default value\n* @throws {Error} unexpected error\n* @returns {Function} constructor\n*\n* @example\n* var fields = [\n*     {\n*         'type': 'union',\n*         'fields': [\n*             {\n*                 'name': 'double',\n*                 'description': 'double-precision floating-point number',\n*                 'type': 'float64',\n*                 'enumerable': true,\n*                 'writable': true,\n*                 'castingMode': 'none'\n*             },\n*             {\n*                 'name': 'words',\n*                 'description': 'high and low words',\n*                 'type': 'uint32',\n*                 'length': 2,\n*                 'enumerable': true,\n*                 'writable': true,\n*                 'castingMode': 'none'\n*             }\n*         ]\n*     }\n* ];\n* var Struct = factory( fields );\n*\n* var data = {\n*     'double': 3.14\n* };\n* var s = new Struct( data );\n* // returns <Struct>\n*\n* var v = s.double;\n* // returns 3.14\n*\n* var w = s.words;\n* // e.g., <Uint32Array>[ 1374389535, 1074339512 ]\n*/\nfunction factory( fields ) {\n\tvar FIELD_NAMES;\n\tvar BYTE_LENGTH;\n\tvar PARTITIONS;\n\tvar ALIGNMENT;\n\tvar ACCESSORS;\n\tvar FIELDS;\n\tvar tmp;\n\tvar o;\n\tif ( !isCollection( fields ) ) {\n\t\tthrow new TypeError( format( 'null2O', fields ) );\n\t}\n\t// Normalize the list of field objects:\n\ttmp = normalize( fields );\n\tif ( tmp instanceof Error ) {\n\t\tthrow tmp;\n\t}\n\tFIELDS = tmp;\n\n\t// Resolve the list of unique field names:\n\ttmp = fieldNames( FIELDS );\n\tif ( tmp instanceof Error ) {\n\t\tthrow tmp;\n\t}\n\tFIELD_NAMES = tmp;\n\n\t// Resolve the struct's alignment requirements:\n\tALIGNMENT = resolveAlignment( FIELDS );\n\n\t// Compute the byte offset for each field:\n\tFIELDS = byteOffsets( FIELDS, ALIGNMENT );\n\n\t// Now that we've finished processing provided field objects, flatten the list, such that union types are implied by field objects having the same byte offset:\n\tFIELDS = flatten( FIELDS );\n\n\t// Compute field \"partitions\" (i.e., non-overlapping views):\n\tPARTITIONS = partitions( FIELDS );\n\n\t// Compute the struct's byte length:\n\to = FIELDS[ FIELDS.length-1 ];\n\tBYTE_LENGTH = o.byteOffset + o.byteLength + o.padding;\n\n\t/**\n\t* Constructor for a composite data type (a.k.a., a `struct`).\n\t*\n\t* @private\n\t* @param {(Object|ArrayBuffer)} [arg] - array buffer or data object\n\t* @param {NonNegativeInteger} [byteOffset=0] - offset, in bytes, to the first byte in a provided buffer for the returned `struct` to reference\n\t* @param {NonNegativeInteger} [byteLength] - maximum number of elements in the byte array\n\t* @throws {RangeError} must provide sufficient memory to accommodate byte offset and view length requirements\n\t* @throws {TypeError} second argument must be a nonnegative integer\n\t* @throws {TypeError} third argument must be a nonnegative integer\n\t* @throws {Error} union types may only be initialized by a single member\n\t* @returns {Struct} struct instance\n\t*/\n\tfunction Struct( arg, byteOffset, byteLength ) {\n\t\tvar values;\n\t\tvar nargs;\n\t\tvar cache;\n\t\tvar view;\n\t\tvar obj;\n\t\tvar o;\n\t\tvar v;\n\t\tvar i;\n\t\tvar j;\n\t\tvar k;\n\n\t\tnargs = arguments.length;\n\t\tif ( !( this instanceof Struct ) ) {\n\t\t\tif ( nargs === 0 ) {\n\t\t\t\treturn new Struct();\n\t\t\t}\n\t\t\tif ( nargs === 1 ) {\n\t\t\t\treturn new Struct( arg );\n\t\t\t}\n\t\t\tif ( nargs === 2 ) {\n\t\t\t\treturn new Struct( arg, byteOffset );\n\t\t\t}\n\t\t\treturn new Struct( arg, byteOffset, byteLength );\n\t\t}\n\t\tif ( isArrayBuffer( arg ) ) {\n\t\t\tif ( nargs === 1 ) {\n\t\t\t\tview = new DataView( arg, 0, BYTE_LENGTH );\n\t\t\t} else {\n\t\t\t\tif ( !isNonNegativeInteger( byteOffset ) ) {\n\t\t\t\t\tthrow new TypeError( format( 'null2C', byteOffset ) );\n\t\t\t\t}\n\t\t\t\tif ( nargs === 2 ) {\n\t\t\t\t\tview = new DataView( arg, byteOffset, BYTE_LENGTH );\n\t\t\t\t} else {\n\t\t\t\t\tif ( !isNonNegativeInteger( byteLength ) ) {\n\t\t\t\t\t\tthrow new TypeError( format( 'invalid argument. Byte length must be a nonnegative integer. Value: `%s`.', byteLength ) );\n\t\t\t\t\t}\n\t\t\t\t\tview = new DataView( arg, byteOffset, min( byteLength, BYTE_LENGTH ) ); // eslint-disable-line max-len\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( view.byteLength < BYTE_LENGTH ) {\n\t\t\t\tthrow new RangeError( format( 'invalid argument. ArrayBuffer has insufficient capacity. Minimum capacity: `%u`.', BYTE_LENGTH ) );\n\t\t\t}\n\t\t} else {\n\t\t\tview = new DataView( new ArrayBuffer( BYTE_LENGTH ) );\n\t\t\tif ( nargs > 0 ) {\n\t\t\t\tif ( !isObject( arg ) ) {\n\t\t\t\t\tthrow new TypeError( format( 'null3L', arg ) );\n\t\t\t\t}\n\t\t\t\tobj = arg;\n\t\t\t}\n\t\t}\n\t\t// Bind the byte buffer to the current instance:\n\t\tsetReadOnly( this, PRIVATE_BUFFER, view );\n\n\t\t// If we were provided a data object, set provided fields...\n\t\tif ( obj !== void 0 ) {\n\t\t\t// Initialize an array containing values to set:\n\t\t\tvalues = filled( void 0, FIELDS.length );\n\n\t\t\t// For each field, determine whether a value has been specified...\n\t\t\tcache = {};\n\t\t\tfor ( i = 0; i < FIELDS.length; i++ ) {\n\t\t\t\tk = FIELD_NAMES[ i ];\n\t\t\t\tj = PARTITIONS[ i ];\n\t\t\t\tif ( hasProp( obj, k ) ) {\n\t\t\t\t\t// Check whether a value has already been specified for this view (i.e., via another union member)...\n\t\t\t\t\tif ( cache[ j ] ) {\n\t\t\t\t\t\tthrow new Error( 'invalid argument. Union types may only be initialized by a single member.' );\n\t\t\t\t\t}\n\t\t\t\t\tvalues[ i ] = obj[ k ];\n\t\t\t\t\tcache[ j ] = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Perform a second pass over the fields to fill in default initial values...\n\t\t\tfor ( i = 0; i < FIELDS.length; i++ ) {\n\t\t\t\tj = PARTITIONS[ i ];\n\t\t\t\tif ( cache[ j ] ) {\n\t\t\t\t\t// Skip fields already having initial values...\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\to = FIELDS[ i ];\n\t\t\t\tif ( o.default !== void 0 ) {\n\t\t\t\t\tvalues[ i ] = o.default;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Set all fields with initialization values...\n\t\t\tfor ( i = 0; i < FIELDS.length; i++ ) {\n\t\t\t\tv = values[ i ];\n\t\t\t\tif ( v !== void 0 ) {\n\t\t\t\t\tACCESSORS[ FIELD_NAMES[ i ] ][ 1 ].call( this, v );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t* Constructor name.\n\t*\n\t* @private\n\t* @name name\n\t* @memberof Struct\n\t* @readonly\n\t* @type {string}\n\t* @default 'Struct'\n\t*/\n\tsetReadOnly( Struct, 'name', CTOR_NAME );\n\n\t/**\n\t* Alignment.\n\t*\n\t* @private\n\t* @name alignment\n\t* @memberof Struct\n\t* @readonly\n\t* @type {PositiveInteger}\n\t*/\n\tsetReadOnly( Struct, 'alignment', ALIGNMENT );\n\n\t/**\n\t* Size (in bytes) of the `struct`.\n\t*\n\t* @private\n\t* @name byteLength\n\t* @memberof Struct\n\t* @readonly\n\t* @type {PositiveInteger}\n\t*/\n\tsetReadOnly( Struct, 'byteLength', BYTE_LENGTH );\n\n\t/**\n\t* Returns a list of `struct` fields.\n\t*\n\t* @private\n\t* @name fields\n\t* @memberof Struct\n\t* @readonly\n\t* @type {Array<string>}\n\t*/\n\tsetNonEnumerableReadOnlyAccessor( Struct, 'fields', function get() {\n\t\treturn FIELD_NAMES.slice();\n\t});\n\n\t/**\n\t* Returns a string corresponding to the `struct` layout.\n\t*\n\t* @private\n\t* @name layout\n\t* @memberof Struct\n\t* @readonly\n\t* @type {string}\n\t*/\n\tsetNonEnumerableReadOnlyAccessor( Struct, 'layout', function get() {\n\t\t// As this is not likely to be a commonly used API, intentionally recompute the layout format in order to avoid consuming memory for what could be a long string...\n\t\treturn layoutFormat( FIELDS );\n\t});\n\n\t/**\n\t* Returns the length, in bytes, of the value specified by the provided field name.\n\t*\n\t* @private\n\t* @name byteLengthOf\n\t* @memberof Struct\n\t* @readonly\n\t* @type {Function}\n\t* @param {string} name - field name\n\t* @throws {Error} struct must have at least one field\n\t* @throws {TypeError} must provide a recognized field name\n\t* @returns {NonNegativeInteger} byte length\n\t*/\n\tsetReadOnly( Struct, 'byteLengthOf', function byteLengthOf( name ) {\n\t\tvar idx = fieldIndex( FIELD_NAMES, name );\n\t\tif ( idx instanceof Error ) {\n\t\t\tthrow idx;\n\t\t}\n\t\treturn FIELDS[ idx ].byteLength;\n\t});\n\n\t/**\n\t* Returns the offset, in bytes, from the beginning of a `struct` to the value specified by the provided field name.\n\t*\n\t* @private\n\t* @name byteOffsetOf\n\t* @memberof Struct\n\t* @readonly\n\t* @type {Function}\n\t* @param {string} name - field name\n\t* @throws {Error} struct must have at least one field\n\t* @throws {TypeError} must provide a recognized field name\n\t* @returns {NonNegativeInteger} byte offset\n\t*/\n\tsetReadOnly( Struct, 'byteOffsetOf', function byteOffsetOf( name ) {\n\t\tvar idx = fieldIndex( FIELD_NAMES, name );\n\t\tif ( idx instanceof Error ) {\n\t\t\tthrow idx;\n\t\t}\n\t\treturn FIELDS[ idx ].byteOffset;\n\t});\n\n\t/**\n\t* Returns the description associated with a provided field name.\n\t*\n\t* @private\n\t* @name descriptionOf\n\t* @memberof Struct\n\t* @readonly\n\t* @type {Function}\n\t* @param {string} name - field name\n\t* @throws {Error} struct must have at least one field\n\t* @throws {TypeError} must provide a recognized field name\n\t* @returns {string} description\n\t*/\n\tsetReadOnly( Struct, 'descriptionOf', function descriptionOf( name ) {\n\t\tvar idx = fieldIndex( FIELD_NAMES, name );\n\t\tif ( idx instanceof Error ) {\n\t\t\tthrow idx;\n\t\t}\n\t\treturn FIELDS[ idx ].description;\n\t});\n\n\t/**\n\t* Returns the type associated with a provided field name.\n\t*\n\t* @private\n\t* @name typeOf\n\t* @memberof Struct\n\t* @readonly\n\t* @type {Function}\n\t* @param {string} name - field name\n\t* @throws {Error} struct must have at least one field\n\t* @throws {TypeError} must provide a recognized field name\n\t* @returns {(string|Object)} type\n\t*/\n\tsetReadOnly( Struct, 'typeOf', function typeOf( name ) {\n\t\tvar idx = fieldIndex( FIELD_NAMES, name );\n\t\tif ( idx instanceof Error ) {\n\t\t\tthrow idx;\n\t\t}\n\t\treturn FIELDS[ idx ].type;\n\t});\n\n\t/**\n\t* Returns the underlying byte buffer of a `struct`.\n\t*\n\t* @private\n\t* @name bufferOf\n\t* @memberof Struct\n\t* @readonly\n\t* @type {Function}\n\t* @param {Object} obj - struct instance\n\t* @throws {TypeError} must provide a `struct` instance\n\t* @returns {ArrayBuffer} underlying byte buffer\n\t*/\n\tsetReadOnly( Struct, 'bufferOf', function bufferOf( obj ) {\n\t\tif ( !isStructInstance( obj ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be a `struct` instance. Value: `%s`.', obj ) );\n\t\t}\n\t\treturn obj[ PRIVATE_BUFFER ].buffer;\n\t});\n\n\t/**\n\t* Returns the underlying byte buffer of a `struct` as a `DataView`.\n\t*\n\t* @private\n\t* @name viewOf\n\t* @memberof Struct\n\t* @readonly\n\t* @type {Function}\n\t* @param {Object} obj - struct instance\n\t* @throws {TypeError} must provide a `struct` instance\n\t* @returns {DataView} view of underlying byte buffer\n\t*/\n\tsetReadOnly( Struct, 'viewOf', function viewOf( obj ) {\n\t\tvar buf;\n\t\tif ( !isStructInstance( obj ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be a `struct` instance. Value: `%s`.', obj ) );\n\t\t}\n\t\tbuf = obj[ PRIVATE_BUFFER ];\n\t\treturn new DataView( buf.buffer, buf.byteOffset, buf.byteLength );\n\t});\n\n\t// Create prototype accessors for getting and setting field values:\n\tACCESSORS = createPrototypeAccessors( Struct.prototype, FIELDS );\n\n\t/**\n\t* Serializes a `struct` to a string.\n\t*\n\t* @private\n\t* @name toString\n\t* @memberof Struct.prototype\n\t* @readonly\n\t* @type {Function}\n\t* @param {Options} [options] - function options\n\t* @param {string} [options.format='none'] - serialization format\n\t* @throws {Error} `this` must be a struct instance\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @returns {string} serialized `struct` instance\n\t*/\n\tsetReadOnly( Struct.prototype, 'toString', function toString() {\n\t\tvar opts;\n\t\tif ( !( this instanceof Struct ) ) {\n\t\t\tthrow new Error( 'invalid invocation. `this` is not a struct instance.' );\n\t\t}\n\t\tif ( arguments.length > 0 ) {\n\t\t\topts = arguments[ 0 ];\n\t\t} else {\n\t\t\topts = {};\n\t\t}\n\t\treturn struct2string( this, FIELDS, opts );\n\t});\n\n\t/**\n\t* Serializes a `struct` to JSON.\n\t*\n\t* @private\n\t* @name toJSON\n\t* @memberof Struct.prototype\n\t* @readonly\n\t* @type {Function}\n\t* @throws {Error} `this` must be a struct instance\n\t* @returns {JSON} serialized `struct` instance\n\t*/\n\tsetReadOnly( Struct.prototype, 'toJSON', function toJSON() {\n\t\tif ( !( this instanceof Struct ) ) {\n\t\t\tthrow new Error( 'invalid invocation. `this` is not a struct instance.' );\n\t\t}\n\t\treturn struct2json( this, FIELDS );\n\t});\n\n\treturn Struct;\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isObject from '@stdlib/assert-is-object';\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport FIELD_PROPERTIES from './field_properties.js';\nimport isUnionType from './is_union_type.js';\nimport normalizeField from './normalize_field.js';\nimport normalizeUnion from './normalize_union.js';\n\n\n// MAIN //\n\n/**\n* Normalizes a list of field objects.\n*\n* @private\n* @param {Array} fields - input fields\n* @returns {(Array<Object>|Error)} normalized field objects or an error\n*/\nfunction normalize( fields ) {\n\tvar out;\n\tvar tmp;\n\tvar o;\n\tvar i;\n\n\tout = [];\n\tfor ( i = 0; i < fields.length; i++ ) {\n\t\to = fields[ i ];\n\t\tif ( !isObject( o ) ) {\n\t\t\treturn new TypeError( format( 'invalid argument. First argument must be an array of objects. Value: `%s`. Index: `%d`.', o, i ) );\n\t\t}\n\t\t// Check for a union type which is a collection of nested field objects which all have the same byte length...\n\t\tif ( isUnionType( o ) ) {\n\t\t\ttmp = normalizeUnion( o );\n\t\t\tif ( tmp === null ) {\n\t\t\t\treturn new TypeError( format( 'invalid argument. Union types must be an array of objects. Value: `%s`. Index: `%d`.', JSON.stringify( o ), i ) );\n\t\t\t}\n\t\t\tif ( tmp instanceof Error ) {\n\t\t\t\treturn tmp;\n\t\t\t}\n\t\t} else {\n\t\t\ttmp = normalizeField( o, FIELD_PROPERTIES );\n\t\t\tif ( tmp instanceof Error ) {\n\t\t\t\treturn tmp;\n\t\t\t}\n\t\t}\n\t\tout.push( tmp );\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default normalize;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport isUnionType from './is_union_type.js';\n\n\n// MAIN //\n\n/**\n* Resolves a list of field names.\n*\n* @private\n* @param {Array<Object>} fields - list of field objects\n* @returns {(Array<string>|Error)} list of field names or an error\n*/\nfunction fieldNames( fields ) {\n\tvar hash;\n\tvar out;\n\tvar o1;\n\tvar o2;\n\tvar i;\n\tvar j;\n\tvar k;\n\n\thash = {};\n\tout = [];\n\tfor ( i = 0; i < fields.length; i++ ) {\n\t\to1 = fields[ i ];\n\t\tk = o1.name;\n\t\tif ( isUnionType( o1 ) ) {\n\t\t\tfor ( j = 0; j < o1.fields.length; j++ ) {\n\t\t\t\to2 = o1.fields[ j ];\n\t\t\t\tk = o2.name;\n\t\t\t\tif ( hash[ k ] === true ) {\n\t\t\t\t\treturn new TypeError( format( 'invalid argument. First argument must be an array of objects having unique field names. Value: `%s`.', JSON.stringify( fields ) ) );\n\t\t\t\t}\n\t\t\t\thash[ k ] = true;\n\t\t\t\tout.push( k );\n\t\t\t}\n\t\t} else if ( hash[ k ] === true ) {\n\t\t\treturn new TypeError( format( 'invalid argument. First argument must be an array of objects having unique field names. Value: `%s`.', JSON.stringify( fields ) ) );\n\t\t} else {\n\t\t\thash[ k ] = true;\n\t\t\tout.push( k );\n\t\t}\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default fieldNames;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isUnionType from './is_union_type.js';\n\n\n// MAIN //\n\n/**\n* Flattens a list of field objects.\n*\n* @private\n* @param {Array<Object>} fields - list of field objects\n* @returns {Array<Object>} new list\n*/\nfunction flatten( fields ) {\n\tvar out;\n\tvar o;\n\tvar i;\n\tvar j;\n\n\tout = [];\n\tfor ( i = 0; i < fields.length; i++ ) {\n\t\to = fields[ i ];\n\t\tif ( isUnionType( o ) ) {\n\t\t\tfor ( j = 0; j < o.fields.length; j++ ) {\n\t\t\t\tout.push( o.fields[ j ] );\n\t\t\t}\n\t\t} else {\n\t\t\tout.push( o );\n\t\t}\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default flatten;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns a list of partition indices.\n*\n* ## Notes\n*\n* -   This function partitions field objects according to whether a field object represents a unique \"view\" over an underlying byte buffer. Field objects within a union belong to the same partition.\n*\n* @private\n* @param {Array<Object>} fields - list of normalized field objects\n* @returns {NonNegativeIntegerArray} list of indices\n*/\nfunction partitions( fields ) {\n\tvar out;\n\tvar N;\n\tvar o;\n\tvar i;\n\tvar j;\n\n\tN = fields.length;\n\n\tout = [];\n\tj = 0;\n\tfor ( i = 0; i < N-1; i++ ) {\n\t\to = fields[ i ];\n\n\t\t// Check for the start of a union...\n\t\tif ( o.byteOffset === fields[ i+1 ].byteOffset ) {\n\t\t\tout.push( j );\n\t\t\tcontinue;\n\t\t}\n\t\tout.push( j );\n\t\tj += 1;\n\t}\n\t// Set the partition for the last field object:\n\tout.push( j );\n\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default partitions;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar CTOR_NAME = 'Struct';\n\n\n// EXPORTS //\n\nexport default CTOR_NAME;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable id-length */\n\n'use strict';\n\n// MODULES //\n\nimport setNonEnumerableReadOnlyAccessor from '@stdlib/utils-define-nonenumerable-read-only-accessor';\nimport setNonEnumerableReadWriteAccessor from '@stdlib/utils-define-nonenumerable-read-write-accessor';\nimport setReadOnlyAccessor from '@stdlib/utils-define-read-only-accessor';\nimport setReadWriteAccessor from '@stdlib/utils-define-read-write-accessor';\nimport getter from './getter.js';\nimport setter from './setter.js';\n\n\n// MAIN //\n\n/**\n* Assigns methods for accessing field values to a provided prototype.\n*\n* @private\n* @param {Object} p - prototype\n* @param {Array<Object>} fields - field objects\n* @returns {Object} object containing accessors for each field\n*/\nfunction createPrototypeAccessors( p, fields ) {\n\tvar get;\n\tvar set;\n\tvar out;\n\tvar o;\n\tvar i;\n\n\tout = {};\n\tfor ( i = 0; i < fields.length; i++ ) {\n\t\to = fields[ i ];\n\t\tget = getter( o );\n\t\tset = setter( o );\n\t\tif ( o.enumerable ) {\n\t\t\tif ( o.writable ) {\n\t\t\t\tsetReadWriteAccessor( p, o.name, get, set );\n\t\t\t} else {\n\t\t\t\tsetReadOnlyAccessor( p, o.name, get );\n\t\t\t}\n\t\t} else if ( o.writable ) {\n\t\t\tsetNonEnumerableReadWriteAccessor( p, o.name, get, set );\n\t\t} else {\n\t\t\tsetNonEnumerableReadOnlyAccessor( p, o.name, get );\n\t\t}\n\t\tout[ o.name ] = [ get, set ];\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default createPrototypeAccessors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isCollection from '@stdlib/assert-is-collection';\nimport isComplexLike from '@stdlib/assert-is-complex-like';\nimport isFunction from '@stdlib/assert-is-function';\nimport typedarray2json from '@stdlib/array-to-json';\nimport isStructInstance from './is_struct_instance.js';\n\n\n// MAIN //\n\n/**\n* Serializes a `struct` instance to JSON.\n*\n* @private\n* @param {Struct} struct - struct instance\n* @param {Array<Object>} fields - list of normalized fields\n* @returns {Object} JSON representation\n*/\nfunction toJSON( struct, fields ) {\n\tvar out;\n\tvar o;\n\tvar v;\n\tvar i;\n\n\tout = {};\n\tfor ( i = 0; i < fields.length; i++ ) {\n\t\to = fields[ i ];\n\t\tv = struct[ o.name ];\n\t\tif ( isCollection( v ) ) {\n\t\t\tv = typedarray2json( v );\n\t\t} else if ( isStructInstance( v ) ) {\n\t\t\tv = v.toJSON();\n\t\t} else if ( isComplexLike( v ) && isFunction( v.toJSON ) ) {\n\t\t\tv = v.toJSON();\n\t\t}\n\t\tout[ o.name ] = v;\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default toJSON;\n"],"names":["PRIVATE_BUFFER","DATA_VIEW_METHODS","int8","get","set","int16","int32","int64","uint8","uint16","uint32","uint64","float16","float32","float64","complex32","complex64","complex128","bool","CMPLX_TO_REAL","getter","obj","length","isStructType","offset","view","out","i","this","byteOffset","push","type","buffer","byteLength","getStructArray","typedarray","getTypedArray","method","IS_LITTLE_ENDIAN","getBigInt","Boolean","getBoolean","re","im","complex","getComplex","getStruct","Error","format","boolean2number","value","bigint2number","Number","number2boolean","complex2boolean","setBoolean","dt","v","isBoolean","isNumber","defaults","dtypes","real","isBigInt","bigint2boolean","isComplexLike","complexDType","isAllowedCast","castingMode","TypeError","name","setBigInt","isInteger","minDataType","BigInt","floor","boolean2bigint","isStructInstance","isObject","isDataView","complex2number","setter","values","views","dest","src","buf","nb","isCollection","RangeError","casting","constructor","viewOf","Uint8Array","gcopy","setStructArray","dtype","isComplexDataType","reinterpretComplex","isBooleanDataType","reinterpretBoolean","isRealDataType","gfill","ndarray","map","assign","setTypedArray","isRealFloatingPointDataType","isSignedIntegerDataType","minSignedIntegerDataType","setNumber","setComplex","setStruct","FIELD_PROPERTIES","isUnionType","fields","isFunction","isPositiveInteger","alignment","byteLengthOf","byteOffsetOf","bufferOf","isValidBoolean","DTYPES","ALIGNMENTS","MANDATORY_FIELD_NAMES","VALIDATORS","isString","contains","join","description","enumerable","writable","default","constantFunction","normalize","keys","err","k","padding","hasProp","hasProperties","bytesPerElement","JSON","stringify","max","normalizeUnion","dflg","tmp","len","o","normalizeField","resolveAlignment","fieldIndex","names","idx","indexOf","setPadding","replacer","match","p1","parseInt","layoutFormat","N","replace","layout","substring","FORMATS","isFormat","toString","struct","options","opts","isPlainObject","hasOwnProp","Struct","fmt0","fmt1","fmt2","bfmt","ufmt","fmt","flg","ib","c0","c1","c2","w1","w","f","t","j","linearFormat","factory","FIELD_NAMES","BYTE_LENGTH","PARTITIONS","ALIGNMENT","ACCESSORS","FIELDS","hash","o1","fieldNames","arg","nargs","cache","arguments","isArrayBuffer","DataView","isNonNegativeInteger","min","ArrayBuffer","setReadOnly","filled","call","byteOffsets","flatten","partitions","setNonEnumerableReadOnlyAccessor","slice","p","setReadWriteAccessor","setReadOnlyAccessor","setNonEnumerableReadWriteAccessor","createPrototypeAccessors","prototype","struct2string","typedarray2json","toJSON","struct2json"],"mappings":"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"}